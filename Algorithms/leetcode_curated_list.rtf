{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red33\green255\blue6;\red253\green128\blue8;\red251\green2\blue7;
\red251\green2\blue7;\red33\green255\blue6;\red253\green128\blue8;}
{\*\expandedcolortbl;;\cssrgb\c0\c97680\c0;\cssrgb\c100000\c57637\c0;\cssrgb\c100000\c14913\c0;
\cssrgb\c100000\c14913\c0;\cssrgb\c0\c97680\c0;\cssrgb\c100000\c57637\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww12620\viewh13640\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Arrays:
\f1\b0 \
Island Parimeter - \cf2 Easy\cf0 \
Two Sum - \cf2 Easy\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Remove Duplicates from Sorted Array - \cf2 Easy\cf0 \
Remove Element - \cf2 Easy\
\cf0 Search Insert Position - \cf2 Easy\
\cf0 Maximum Subarray - \cf2 Easy\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Plus One - \cf2 Easy\cf0 \
Merge Sorted Array - \cf2 Easy\cf0 \
Container With Most Water - \cf3 Medium\cf0 \
3 Sum - \cf3 Medium\cf0 \
3 Sum Closest - \cf3 Medium\cf0 \
4 Sum - \cf3 Medium\cf0 \
Next Permutation - \cf3 Medium\cf0 \
Search in Rotated Sorted Array - \cf3 Medium\cf0 \
Find First and Last Position of Element - \cf3 Medium\cf0 \
Valid Sudoku - \cf3 Medium\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Median of Two Sorted Arrays - \cf4 Hard\cf0 \
Sudoku Solver - \cf4 Hard\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 First Missing Positive - \cf5 Hard\cf0 \
Trapping Rain Water - \cf5 Hard\cf0 \
\

\f0\b Strings:\

\f1\b0 Roman to Integer - \cf6 Easy\cf0 \
Longest Common Prefix - \cf6 Easy\cf0 \
Valid Parantheses - \cf6 Easy\cf0 \
Implement strStr() - \cf6 Easy\cf0 \
Length of Last Word - \cf6 Easy\cf0 \
Add Binary - \cf6 Easy\cf0 \
Valid Palyndrome - \cf6 Easy\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Excel Sheet Column Title - \cf6 Easy\cf0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Longest Substring Without Repetition - \cf7 Medium\cf0 \
Longest Palyndrome Substring - \cf7 Medium\cf0 \
ZigZag Conversion - \cf7 Medium\cf0 \
String to Integer (atoi) - \cf7 Medium\cf0 \
Integer to Roman - \cf7 Medium\cf0 \
Letter Combinations of a Phone Number - \cf7 Medium\cf0 \
Generate Parantheses - \cf7 Medium\cf0 \
Count and Say - \cf7 Medium\cf0 \
Multiply Strings - \cf7 Medium\cf0 \
Regular Expression Matching - \cf4 Hard\cf0 \
Substring with Concatenation of A - \cf4 Hard\cf0 \
Longest Valid Parentheses - \cf4 Hard\cf0 \
Wildcard Matching - \cf4 Hard\cf0 \
\

\f0\b Dynamic Programming:
\f1\b0 \
Island Perimeter - \cf6 Easy\cf0 \
Maximum Subarray - \cf6 Easy\cf0 \
Climbing Stairs - \cf6 Easy\cf0 \
Pascal\'92s Triangle - \cf6 Easy\cf0 \
Pascal\'92s Triangle II - \cf6 Easy\cf0 \
Best Time to Buy and Sell Stock - \cf6 Easy\cf0 \
Counting Bits - \cf6 Easy\cf0 \
Is Subsequence - \cf6 Easy\cf0 \
Fibonacci Number - \cf6 Easy\cf0 \
Min Cost Climbing Stairs - \cf6 Easy\cf0 \
Longest Palyndromic Substring - \cf7 Medium\cf0 \
Generate Parantheses - \cf7 Medium\cf0 \
Jump Game II - \cf7 Medium\cf0 \
Jump Game - \cf7 Medium\cf0 \
Unique Paths - \cf7 Medium\cf0 \
Unique Paths II - \cf7 Medium\cf0 \
Minimum Path Sum - \cf7 Medium\cf0 \
Decode Ways - \cf7 Medium\cf0 \
Unique Binary Search Trees II - \cf7 Medium\cf0 \
Unique Binary Search Trees - \cf7 Medium\cf0 \
Regular Expression Matching - \cf4 Hard\cf0 \
Longest Valid Parentheses - \cf4 Hard\cf0 \
Trapping Rain Water - \cf4 Hard\cf0 \
Wildcard Matching - \cf4 Hard\cf0 \
Edit Distance - \cf4 Hard\cf0 \
Maximal Rectangle - \cf4 Hard\cf0 \
Scramble String - \cf4 Hard\cf6 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b \cf0 Hash Table:\

\f1\b0 Linked List Cycle - \cf6 Easy\cf0 \
Intersection of Two Linked Lists - \cf6 Easy\cf0 \
Majority Element - \cf6 Easy\cf0 \
Happy Humber - \cf6 Easy\cf0 \
Isomorphic Strings - \cf6 Easy\cf0 \
Contains Duplicate - \cf6 Easy\cf0 \
Contains Duplicate II - \cf6 Easy\cf0 \
Valid Anagram - \cf6 Easy\cf0 \
Longest Substring Without Repitition - \cf7 Medium\cf0 \
Integer to Roman - \cf7 Medium\cf0 \
Letter Combinations of a Phone Number - \cf7 Medium\cf0 \
Valid Sudoku - \cf7 Medium\cf0 \
Group Anagrams - \cf7 Medium\cf0 \
Set Matrix Zeroes - \cf7 Medium\cf0 \
Construct Binary Tree from Preorder and Postorder List - \cf7 Medium\cf0 \
Construct Binary Tree from Inorder and \'85 - \cf7 Medium\cf0 \
Longest Consecutive Sequence - \cf7 Medium\cf0 \
Clone Graph - \cf7 Medium\cf0 \
Copy List with Random Pointer - \cf7 Medium\cf0 \
Word Break - \cf7 Medium\cf0 \
Substring with Concatenation of A\'85 - \cf4 Hard\cf0 \
First Missing Positive - \cf4 Hard\cf0 \
Minimum Window Substring - \cf4 Hard\cf0 \
Word Ladder II - \cf4 Hard\cf0 \
Word Ladder - \cf4 Hard\cf0 \
Word Break II - \cf4 Hard\cf0 \
Max Points on a Line - \cf4 Hard\
\

\f0\b \cf0 Tree:
\f1\b0 \
Binary Tree Inorder Traversal - \cf6 Easy\cf0 \
Same Tree - \cf6 Easy\cf0 \
Symmetric Tree - \cf6 Easy\cf0 \
Maximum Depth of Binary Tree - \cf6 Easy\cf0 \
Convert Depth of Binary Tree - \cf6 Easy\cf0 \
Convert Sorted Array to Binary Search Tree - \cf6 Easy\cf0 \
Balanced Binary Tree - \cf6 Easy\cf0 \
Minimum Depth of Binary Tree - \cf6 Easy\cf0 \
Unique Binary Search Trees II - \cf7 Medium\cf0 \
Unique Binary Search Trees - \cf7 Medium\cf0 \
Validate Binary Search Tree - \cf7 Medium\cf0 \
Recover Binary Search Tree - \cf7 Medium\cf0 \
Binary Tree Level Order Traversal - \cf7 Medium\cf0 \
Binary Tree Zigzag Level Order Traversal - \cf7 Medium\cf0 \
Construct Binary Tree From Preorder \'85 - \cf7 Medium\cf0 \
Construct Binary Tree From Inorder \'85 - \cf7 Medium\cf0 \
Path Sum II - \cf7 Medium\cf0 \
Flatten Binary Tree to Linked List - \cf7 Medium\cf0 \
Binary Tree Maximum Path Sum - \cf4 Hard\cf0 \
Serialize and Deserialize Binary Tree - \cf4 Hard\cf0 \
Sum of Distances in Tree - \cf4 Hard\cf0 \
Binary Tree Cameras - \cf4 Hard\cf0 \
\

\f0\b Stack:
\f1\b0 \
Binary Tree Inorder Traversal - \cf6 Easy\cf0 \
Binary Tree Preorder Traversal - \cf6 Easy\cf0 \
Binary Tree Postorder Traversal - \cf6 Easy\cf0 \
Min Stack - \cf6 Easy\cf0 \
Implement Stack using Queues - \cf6 Easy\cf0 \
Implement Queue using Stacks - \cf6 Easy\cf0 \
Palindrome Linked List - \cf6 Easy\cf0 \
Next Greater Element I - \cf6 Easy\cf0 \
Simplify Path - \cf7 Medium\cf0 \
Flatten Binary Tree to Linked List - \cf7 Medium\cf0 \
Reorder List - \cf7 Medium\cf0 \
Evaluate Reverse Polish Notation - \cf7 Medium\cf0 \
Binary Search Tree Iterator - \cf7 Medium\cf0 \
Basic Calculator II - \cf7 Medium\cf0 \
Remove Duplicate Letters - \cf7 Medium\cf0 \
Verify Preorder Serialization of a \'85 - \cf7 Medium\cf0 \
Longest Valid Palyndrome - \cf4 Hard\cf0 \
Trapping Rain Water - \cf4 Hard\cf0 \
Largest Rectangle in Histogram - \cf4 Hard\cf0 \
Maximal Rectangle - \cf4 Hard\
\

\f0\b \cf0 Binary Search Trees
\f1\b0 \
Lowest Common Ancestor of a Binary Search Tree - \cf6 Easy\cf0 \
Find Mode in Binary Search Tree - \cf6 Easy\cf0 \
Minimum Absolute Difference in \'85 - \cf6 Easy\cf0 \
Two Sum IV - Input in BST - \cf6 Easy\cf0 \
Search in a Binary Search Tree - \cf6 Easy\cf0 \
Kth Largest Element in a Stream - \cf6 Easy\cf0 \
Minimum Distance Between BST \'85 - \cf6 Easy\cf0 \
Increasing Order Search Tree - \cf6 Easy\cf0 \
Binary Search Tree Iterator - \cf7 Medium\cf0 \
Kth Smallest Element in a BST - \cf7 Medium\cf0 \
Serialize and Deserialize BST - \cf7 Medium\cf0 \
Delete Node in a BST - \cf7 Medium\cf0 \
Convert BST to Greater Tree - \cf7 Medium\cf0 \
Trim a Binary Search Tree - \cf7 Medium\cf0 \
Insert into a Binary Search Tree - \cf7 Medium\cf0 \
Construct Binary Search Tree from \'85 - \cf7 Medium\cf0 \
Binary Search Tree to Greater Sum Tree - \cf7 Medium\cf0 \
All Elements in Two Binary Search Trees - \cf7 Medium\cf0 \
Maximum Sum BST in Binary Tree - \cf4 Hard\cf0 \
Number of Ways to Reorder Array \'85 - \cf4 Hard\cf0 \
\

\f0\b Linked List:
\f1\b0 \
Merge Two Sorted Lists - \cf6 Easy\cf0 \
Remove Duplicates from Sorted List - \cf6 Easy\cf0 \
Linked List Cycle - \cf6 Easy\cf0 \
Intersection of Two Linked Lists - \cf6 Easy\cf0 \
Remove Linked List Elements - \cf6 Easy\cf0 \
Reverse Linked List - \cf6 Easy\cf0 \
Palindrome Linked List - \cf6 Easy\cf0 \
Delete Node in a Linked List - \cf6 Easy\cf0 \
Add Two Numbers - \cf7 Medium\cf0 \
Remove Nth Node From End of List - \cf7 Medium\cf0 \
Swap Nodes in Pairs - \cf7 Medium\cf0 \
Rotate List - \cf7 Medium\cf0 \
Remove Duplicates from Sorted List II - \cf7 Medium\cf0 \
Partition List - \cf7 Medium\cf0 \
Reverse Linked List II - \cf7 Medium\cf0 \
Linked List Cycle II - \cf7 Medium\cf0 \
Merge k Sorted Lists - \cf4 Hard\cf0 \
Reverse Nodes in k-Group - \cf4 Hard\cf0 \
All O`one Data Structure - \cf4 Hard\cf0 \
LFU Cache - \cf4 Hard\cf0 \
Design Skiplist - \cf4 Hard\
\

\f0\b \cf0 Graph:
\f1\b0 \cf4 \
\cf0 Find the Town Judge - \cf6 Easy\cf0 \
Find Center of Star Graph - \cf6 Easy\cf0 \
Find if Path Exists in Graph - \cf6 Easy\cf0 \
Clone Graph - \cf7 Medium\cf0 \
Course Schedule - \cf7 Medium\cf0 \
Course Schedule II - \cf7 Medium\cf0 \
Minimum Height Trees - \cf7 Medium\cf0 \
Reconstruct Itinerary - \cf7 Medium\cf0 \
Evaluate Division - \cf7 Medium\cf0 \
Number of Provinces - \cf7 Medium\cf0 \
Redundant Connection - \cf7 Medium\cf0 \
Network Delay Time - \cf7 Medium\cf0 \
Is Graph Bipartite? - \cf7 Medium\cf0 \
Cheapest Flights Within K Stops - \cf7 Medium\cf0 \
All Paths From Source to Target - \cf7 Medium\cf0 \
Longest Increasing Path in a Matrix - \cf4 Hard\cf0 \
Design Excel Sum Formula - \cf4 Hard\cf0 \
Redundant Connection II - \cf4 Hard\cf0 \
Cracking the Safe - \cf4 Hard\cf0 \
\

\f0\b Queues:
\f1\b0 \
First Unique Character in a String - \cf6 Easy\cf0 \
Number of Recent Calls - \cf6 Easy\cf0 \
Number of Students Unable to Eat Lunch - \cf6 Easy\cf0 \
Flatten Nested List Iterator - \cf7 Medium\cf0 \
Design Phone Directory - \cf7 Medium\cf0 \
Design Circular Queue - \cf7 Medium\cf0 \
Design Circular Deque - \cf7 Medium\cf0 \
Dota2 Senate - \cf7 Medium\cf0 \
Maximum Sum Circular Subarray - \cf7 Medium\cf0 \
Reveal Cards in Increasing Order - \cf7 Medium\cf0 \
Product of the Last K Numbers - \cf7 Medium\cf0 \
Longest Continuous Subarray - \cf7 Medium\cf0 \
Design Front Middle Back Queue - \cf7 Medium\cf0 \
Jump Game VI - \cf7 Medium\cf0 \
Find the Winner of the Circular Game - \cf7 Medium\cf0 \
Sliding Window Maximum - \cf4 Hard\cf0 \
Shortest Subarray with Sum at Least k - \cf4 Hard\cf0 \
Stamping the Sequence - \cf4 Hard\cf0 \
Constrained Subsequence Sum - \cf4 Hard\cf0 \
Max Value of Equation - \cf4 Hard\cf0 \
\

\f0\b Heap:
\f1\b0 \
Relative Ranks - \cf6 Easy\cf0 \
Kth Largest Element in a Stream - \cf6 Easy\cf0 \
Last Stone Weight - \cf6 Easy\cf0 \
The K Weakest Rows in a Matrix - \cf6 Easy\cf0 \
Maximum Product of Two Elements in an Array - \cf6 Easy\cf0 \
Ugly Number II - \cf7 Medium\cf0 \
Super Ugly Number - \cf7 Medium\cf0 \
Top K Frequent Elements - \cf7 Medium\cf0 \
Design Twitter - \cf7 Medium\cf0 \
Find K Pairs with Smallest Sums - \cf7 Medium\cf0 \
Kth Smallest Element in a Sorted Matrix - \cf7 Medium\cf0 \
Sort Characters by Frequency - \cf7 Medium\cf0 \
Task Scheduler - \cf7 Medium\cf0 \
The Skyline Problem - \cf4 Hard\cf0 \
Find Median from Data Stream - \cf4 Hard\cf0 \
Trapping Rain Water II - \cf4 Hard\cf0 \
Strong Password Checker - \cf4 Hard}